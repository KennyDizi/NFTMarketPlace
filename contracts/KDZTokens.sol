// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "./KDZTokenConfig.sol";

// ----------------------------------------------------------------------------
// KDZTokens - TREES NFT Contract
//
// Copyright (c) 2021 SAFETREES SPACE.
// https://safetrees.space/
//
// ----------------------------------------------------------------------------

contract KDZTokens is
    ERC721,
    KDZTokenConfig,
    AccessControlEnumerable,
    ERC721Enumerable,
    ERC721Burnable,
    ERC721Pausable
{
    using Counters for Counters.Counter;
    using SafeMath for uint256;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    /**
     * @dev Tracker for tokenId
     */
    Counters.Counter private _tokenIdTracker;

    /**
     * @dev Emitted when `tokenId` token is minted from `to`.
     */
    event Mint(address indexed to, uint256 indexed tokenId);

    // base URI
    string private _baseTokenURI;

    /**
     * @dev Media links to store tokenId image for inventory
     */
    mapping(uint256 => string) _tokenURIs;

    constructor() ERC721(TOKEN_NAME, TOKEN_SYMBOL) {
        // setup roles
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to, string memory _tokenURI) public virtual {
        require(
            hasRole(MINTER_ROLE, _msgSender()),
            "KDZTokens: must have minter role to mint."
        );

        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        uint256 tokenId = _tokenIdTracker.current();

        // if `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer
        _safeMint(to, tokenId);

        // link to the meta data of token ID
        _setTokenURI(tokenId, _tokenURI);

        // increase token id
        _tokenIdTracker.increment();

        // raise event token minted
        emit Mint(to, tokenId);
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function exists(uint256 tokenId) public virtual returns (bool) {
        return _exists(tokenId);
    }

    /**
     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _setTokenURI(uint256 tokenId, string memory _tokenURI)
        internal
        virtual
    {
        // require that token should exist
        require(_exists(tokenId), "KDZTokens: URI set of nonexistent token");

        _tokenURIs[tokenId] = _tokenURI;
    }

    /**
     * @dev Public function to set the base URI for all token IDs.
     */
    function setTokenBaseURI(string memory _baseURI) public {
        require(
            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),
            "KDZTokens: must have admin role to set base URI."
        );

        // call internal function
        _baseTokenURI = _baseURI;
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual {
        require(
            hasRole(PAUSER_ROLE, _msgSender()),
            "KDZTokens: must have pauser role to pause."
        );
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual {
        require(
            hasRole(PAUSER_ROLE, _msgSender()),
            "KDZTokens: must have pauser role to unpause."
        );
        _unpause();
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControlEnumerable, ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        // require that token should exist
        require(_exists(tokenId), "KDZTokens: URI query for nonexistent token");

        string memory _tokenURI = _tokenURIs[tokenId];
        string memory base = baseURI();

        // if there is no base URI, return the token URI.
        if (bytes(base).length == 0) {
            return _tokenURI;
        }

        // if both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).
        if (bytes(_tokenURI).length > 0) {
            return string(abi.encodePacked(base, _tokenURI));
        }

        // if there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.
        return string(abi.encodePacked(base, Strings.toString(tokenId)));
    }

    /**
     * @dev Returns the base URI set via setTokenBaseURI function. This will be
     * automatically added as a prefix in {tokenURI} to each token's URI, or
     * to the token ID if no specific URI is set for that token ID.
     */
    function baseURI() public view virtual returns (string memory) {
        return _baseTokenURI;
    }

    /**
     * @dev return currently number of token issued
     */
    function getTotalSupply() public view returns (uint256 totalSupply) {
        require(
            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),
            "KDZTokens: you must be ADMIN to use this function."
        );

        // get token total supply
        totalSupply = _tokenIdTracker.current();
        return totalSupply;
    }

    // TODO buy token and only accept token with Tree Token of type
    // TODO move change price, for sale, and buy token to another contract
    // TODO make Marketplace.sol for market place features https://ethereum.stackexchange.com/questions/112885/i-am-trying-to-create-a-marketplace-smart-contract-to-buy-and-sell-nft-with-erc2
    // TODO ETH2NFTMarketPlace and Token2NFTMarketPlace contract https://stackoverflow.com/questions/68576053/how-to-take-a-our-erc20-token-as-fee-to-our-products
    // https://ethereum.stackexchange.com/questions/68202/smart-contract-that-receives-only-one-token
}
